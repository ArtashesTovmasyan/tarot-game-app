const BASE_URL = "https://tarot-game-app.onrender.com";

// –û–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ -> –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –¥–ª—è –∫–∞—Ä—Ç
const cardNameMapping = {
    "0. –î—É—Ä–∞–∫": "thefool",
    "1. –ú–∞–≥": "themagician",
    "2. –í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞": "thehighpriestess",
    "3. –ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞": "theempress",
    "4. –ò–º–ø–µ—Ä–∞—Ç–æ—Ä": "theemperor",
    "5. –ò–µ—Ä–æ—Ñ–∞–Ω—Ç": "thehierophant",
    "6. –í–ª—é–±–ª–µ–Ω–Ω—ã–µ": "thelovers",
    "7. –ö–æ–ª–µ—Å–Ω–∏—Ü–∞": "thechariot",
    "8. –°–∏–ª–∞": "strength",
    "9. –û—Ç—à–µ–ª—å–Ω–∏–∫": "thehermit",
    "10. –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã": "wheeloffortune",
    "11. –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å": "justice",
    "12. –ü–æ–≤–µ—à–µ–Ω–Ω—ã–π": "thehangedman",
    "13. –°–º–µ—Ä—Ç—å": "death",
    "14. –£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "temperance",
    "15. –î—å—è–≤–æ–ª": "thedevil",
    "16. –ë–∞—à–Ω—è": "thetower",
    "17. –ó–≤–µ–∑–¥–∞": "thestar",
    "18. –õ—É–Ω–∞": "themoon",
    "19. –°–æ–ª–Ω—Ü–µ": "thesun",
    "20. –°—É–¥": "judgement",
    "21. –ú–∏—Ä": "theworld"
};

// –û–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ -> –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –¥–ª—è –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
const zodiacSignMapping = {
    "–û–≤–µ–Ω ‚ôà": "aries",
    "–¢–µ–ª–µ—Ü ‚ôâ": "taurus",
    "–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôä": "gemini",
    "–†–∞–∫ ‚ôã": "cancer",
    "–õ–µ–≤ ‚ôå": "leo",
    "–î–µ–≤–∞ ‚ôç": "virgo",
    "–í–µ—Å—ã ‚ôé": "libra",
    "–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôè": "scorpio",
    "–°—Ç—Ä–µ–ª–µ—Ü ‚ôê": "sagittarius",
    "–ö–æ–∑–µ—Ä–æ–≥ ‚ôë": "capricorn",
    "–í–æ–¥–æ–ª–µ–π ‚ôí": "aquarius",
    "–†—ã–±—ã ‚ôì": "pisces"
};

document.addEventListener("DOMContentLoaded", () => {
    console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...");
    loadSpreads();
    loadZodiacSigns();
    loadHistory();
    loadCards();

    document.getElementById("zodiac-sign").addEventListener("change", (e) => {
        const sign = e.target.value;
        if (sign) {
            console.log(`–ó–∞–≥—Ä—É–∂–∞—é –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞: ${sign}`);
            fetchWithErrorHandling(`${BASE_URL}/api/horoscope/${sign}`)
                .then(data => {
                    if (data) {
                        console.log("–ì–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—É—á–µ–Ω:", data);
                        document.getElementById("horoscope-result").innerHTML = `<p>${data.horoscope}</p>`;
                    } else {
                        document.getElementById("horoscope-result").innerHTML = "<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø.</p>";
                    }
                });
        } else {
            document.getElementById("horoscope-result").innerHTML = "";
        }
    });
});

function showTab(tabId) {
    console.log(`–ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabId}`);
    document.querySelectorAll(".tab-content").forEach(tab => tab.classList.remove("active"));
    document.querySelectorAll(".tab").forEach(tab => tab.classList.remove("active"));
    document.getElementById(tabId).classList.add("active");
    document.querySelector(`.tab[onclick="showTab('${tabId}')"]`).classList.add("active");

    if (tabId === "spreads") loadSpreads();
    if (tabId === "history") loadHistory();
    if (tabId === "horoscope") loadZodiacSigns();
    if (tabId === "cards") loadCards();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetch-–∑–∞–ø—Ä–æ—Å–æ–≤
async function fetchWithErrorHandling(url, options = {}) {
    try {
        const response = await fetch(url, options);
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return await response.json();
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ${url}:`, error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

function loadSpreads() {
    console.log("–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–∫–ª–∞–¥—ã...");
    fetchWithErrorHandling(`${BASE_URL}/api/spreads`)
        .then(spreads => {
            if (spreads) {
                console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã:", spreads);
                const spreadsList = document.getElementById("spreads-list");
                spreadsList.innerHTML = "";
                spreads.forEach(spread => {
                    const div = document.createElement("div");
                    div.className = "spread-item";
                    div.innerHTML = `<div class="icon">${spread.icon}</div>${spread.name}`;
                    div.onclick = () => getSpread(spread.name);
                    spreadsList.appendChild(div);
                });
            } else {
                document.getElementById("spreads-list").innerHTML = "<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã.</p>";
            }
        });
}

function loadZodiacSigns() {
    console.log("–ó–∞–≥—Ä—É–∂–∞—é –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞...");
    fetchWithErrorHandling(`${BASE_URL}/api/zodiac_signs`)
        .then(signs => {
            if (signs) {
                console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞:", signs);
                const select = document.getElementById("zodiac-sign");
                select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫</option>';
                signs.forEach(sign => {
                    const option = document.createElement("option");
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è value
                    const signName = zodiacSignMapping[sign] || sign;
                    option.value = signName;
                    option.textContent = sign;
                    select.appendChild(option);
                });
            } else {
                document.getElementById("zodiac-sign").innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞–∫–æ–≤</option>';
            }
        });
}

function loadHistory() {
    const userId = "123";
    console.log(`–ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è user_id: ${userId}...`);
    fetchWithErrorHandling(`${BASE_URL}/api/history/${userId}`)
        .then(history => {
            const historyList = document.getElementById("history-list");
            if (history) {
                console.log("–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:", history);
                historyList.innerHTML = "";
                if (history.length === 0) {
                    historyList.innerHTML = "<p>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.</p>";
                    return;
                }
                history.forEach(entry => {
                    const div = document.createElement("div");
                    div.className = "history-item";
                    div.innerHTML = `<strong>${entry.date}</strong>: ${entry.spread_name}<br>` +
                        entry.cards.map(card => `${card.name} (${card.position}): ${card.meaning}`).join("<br>");
                    historyList.appendChild(div);
                });
            } else {
                historyList.innerHTML = "<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.</p>";
            }
        });
}

function loadCards() {
    console.log("–ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ä—Ç—ã...");
    fetchWithErrorHandling(`${BASE_URL}/api/cards`)
        .then(cards => {
            const cardsList = document.getElementById("cards-list");
            if (cards) {
                console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:", cards);
                cardsList.innerHTML = "";
                cards.forEach(card => {
                    const div = document.createElement("div");
                    div.className = "card-item";
                    div.textContent = card;
                    div.onclick = () => showCardDetails(card);
                    cardsList.appendChild(div);
                });
            } else {
                cardsList.innerHTML = "<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—ã.</p>";
            }
        });
}

function showCardDetails(cardName) {
    console.log(`–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã: ${cardName}`);
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ
    const englishCardName = cardNameMapping[cardName] || cardName;
    fetchWithErrorHandling(`${BASE_URL}/api/card/${encodeURIComponent(englishCardName)}`)
        .then(card => {
            const cardsList = document.getElementById("cards-list");
            if (card && !card.error) {
                console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:", card);
                cardsList.innerHTML = `<h3>${cardName}</h3>` +
                    `<div class="card-details">` +
                    `<strong>–ü—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚¨ÜÔ∏è:</strong><br>${card.upright}<br><br>` +
                    `<strong>–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ üîÉ:</strong><br>${card.reversed}` +
                    `</div>`;
                const backButton = document.createElement("button");
                backButton.textContent = "–ù–∞–∑–∞–¥";
                backButton.onclick = loadCards;
                cardsList.appendChild(backButton);
            } else {
                console.error("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", card ? card.error : "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
                cardsList.innerHTML = "<p>–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</p>";
                const backButton = document.createElement("button");
                backButton.textContent = "–ù–∞–∑–∞–¥";
                backButton.onclick = loadCards;
                cardsList.appendChild(backButton);
            }
        });
}

function getSpread(spreadName) {
    const userId = "123";
    console.log(`–ü–æ–ª—É—á–∞—é —Ä–∞—Å–∫–ª–∞–¥: ${spreadName} –¥–ª—è user_id: ${userId}...`);
    fetchWithErrorHandling(`${BASE_URL}/api/spread/${spreadName}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ user_id: userId })
    })
        .then(cards => {
            const spreadsList = document.getElementById("spreads-list");
            if (cards) {
                console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞:", cards);
                spreadsList.innerHTML = `<h3>${spreadName}</h3>`;
                cards.forEach(card => {
                    const div = document.createElement("div");
                    div.className = "spread-result";
                    div.innerHTML = `<strong>${card.name}</strong> (${card.position})<br>${card.meaning}`;
                    spreadsList.appendChild(div);
                });
                const backButton = document.createElement("button");
                backButton.textContent = "–ù–∞–∑–∞–¥";
                backButton.onclick = loadSpreads;
                spreadsList.appendChild(backButton);
            } else {
                spreadsList.innerHTML = "<p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥.</p>";
                const backButton = document.createElement("button");
                backButton.textContent = "–ù–∞–∑–∞–¥";
                backButton.onclick = loadSpreads;
                spreadsList.appendChild(backButton);
            }
        });
}